{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"KNEO Pi Documentation","text":"<p>Welcome to the official documentation for KNEO Pi, your go-to resource for getting started, configuring, and utilizing the full potential of your KNEO Pi hardware. This guide provides detailed instructions, examples, and references to help you make the most out of your KNEO Pi and its ecosystem.</p>"},{"location":"index.html#what-youll-find-here","title":"What You'll Find Here","text":"<ul> <li>Getting Started: Learn how to set up and boot your KNEO Pi for the first time, including how to prepare the boot media, connect peripherals, and install the operating system.</li> <li>Configuration: Dive into the various configuration options available for KNEO Pi, including setting up networking, managing GPIO, and enabling AI features through the onboard NPU.</li> <li>Examples: Explore hands-on examples and tutorials to help you implement practical projects and make use of the hardware and software capabilities of KNEO Pi.</li> <li>KNEO Pi OS: Information about the KNEO Pi OS, based on ArchLinux ARM, and how to leverage its package ecosystem and proprietary features such as hardware-accelerated media processing and AI inference.</li> <li>KNEO Pi Hardware: Learn about the hardware specifications of KNEO Pi, including the SoC, GPIO, memory, connectivity, and other key components.</li> </ul>"},{"location":"index.html#getting-assistance","title":"Getting Assistance","text":"<p>If you encounter any issues or need further assistance, please visit Kneron community forums  for additional help.</p>"},{"location":"index.html#document-licensing","title":"Document licensing","text":"<p>All of our online documentation is released under a Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA)  licence.</p>"},{"location":"advanced/advanced.html","title":"Advanced Usage of KNEO Pi SDK","text":"<p>For advanced developers seeking to fully leverage KNEO Pi\u2019s capabilities, additional tools and resources are available, allowing for comprehensive control over hardware and enhanced AI functionality. Below is an overview of the advanced features and documentation available.</p>"},{"location":"advanced/advanced.html#full-function-sdk","title":"Full-Function SDK","text":"<p>KNEO Pi offers a Full-Function SDK tailored for users who need complete access to the main chip of KNEO Pi. This SDK enables advanced control over all Intellectual Property (IP) blocks within the SoC, making it ideal for highly customized and optimiazed applications.  </p> <p>Important</p> <p>The Full-Function SDK is not included with the standard KNEO Pi package and is available separately. For pricing and licensing information, please email us . Access to the SDK is granted upon approval and is subject to additional costs.</p>"},{"location":"advanced/advanced.html#model-compiler-for-npu-compatible-ai-models","title":"Model Compiler for NPU-Compatible AI Models","text":"<p>To run an AI model on KNEO Pi, the Model Compiler is required to compile models into a format compatible with the Neural Processing Unit (NPU) Instruction Set Architecture (ISA). This tool prepares and optimizes AI models, ensuring efficient execution on the KNEO Pi hardware.   </p> <p>Info</p> <p>Refer to Kneron Document Center-model compiler  for details on usage and model preparation.</p>"},{"location":"advanced/advanced.html#plus-library-for-external-ai-dongle-control","title":"PLUS Library for External AI Dongle Control","text":"<p>For users needing to integrate external Kneron AI dongles with KNEO Pi, the optional PLUS Library offers robust control options, enabling seamless communication with compatible AI hardware. This library provides a convenient way to expand KNEO Pi\u2019s AI processing capabilities by connecting external inference units.   </p> <p>Info</p> <p>Refer to Kneron Document Center-PLUS  for details on download instruction and usage.</p>"},{"location":"configuration/config.html","title":"KNEO Pi Configuration via the Command-Line","text":"<p>This guide provides instructions for configuring various aspects of the KNEO Pi development kit via the command line. The configurations allow users to adjust the system settings, network configurations, and advanced options as per their requirements.</p>"},{"location":"configuration/config.html#system-configuration","title":"System Configuration","text":""},{"location":"configuration/config.html#screen-resolution","title":"Screen Resolution","text":"<p>Configure the system's screen resolution to match the display requirements.</p> <p>By default, the KNEO Pi is set to <code>1280x720</code> resolution. This setting is balanced for performance to save computing resources, ensuring that the system can run applications smoothly without excessive CPU and memory usage.</p> <p>Setting the resolution to <code>1920x1080</code> will provide higher display quality, but it comes with a trade-off. It will increase the CPU load by approximately 10% and also consume more DDR memory. This may impact overall system performance, especially on resource-intensive tasks.</p> <p>Command: <pre><code>$ xrandr --output DUMMY0 --mode &lt;resolution&gt;\n</code></pre> Replace <code>&lt;resolution&gt;</code> with the desired resolution (e.g., <code>1920x1080</code> or <code>1280x720</code>).</p> <p>Info</p> <p>Only resolution configuration is supported</p>"},{"location":"configuration/config.html#expand-sd-card-space","title":"Expand SD Card Space","text":"<p>Expand the filesystem to utilize the entire available space on the SD card.</p> <p>To save time during the SD card programming process, the system image is created with a smaller size than the actual capacity of the SD card, typically less than 16GB. However, if your SD card has a capacity larger than 16GB, the unused space will not be available for use by the system until it is expanded.</p> <p>Command: <pre><code>$ resize_rootfs_partition.sh\n</code></pre></p> <p>Warning</p> <p>Expanding the partition will erase data if not done correctly. Ensure to back up important data before proceeding.</p>"},{"location":"configuration/config.html#configure-timezone-or-datetime","title":"Configure Timezone or Date/Time","text":"<p>Set the correct timezone or synchronize system time with an NTP server.</p> <p>Command to configure timezone: <pre><code>$ timedatectl set-timezone &lt;Region/City&gt;\n</code></pre> Replace <code>&lt;Region/City&gt;</code> with your local timezone (e.g., Asia/Taipei).</p> <p>Check available zones: <pre><code>$ timedatectl list-timezones\n</code></pre></p> <p>Command to configure date/time: <pre><code># Configure date only\n$ timedatectl set-time \"2016-11-12\"\n\n# Configure time only\n$ timedatectl set-time \"18:10:40\"\n\n# Configure both date and time\n$ timedatectl set-time \"2016-11-12 18:10:40\"\n</code></pre></p> <p>Warning</p> <p>The KNEO Pi does not have a Real-Time Clock (RTC) module to maintain the system clock when powered off.  Ensure the device has network access to synchronize the time using NTP, or manually configure the clock after each reboot.</p>"},{"location":"configuration/config.html#configure-hostname","title":"Configure Hostname","text":"<p>Change the system's hostname to a custom name.</p> <p>Command:</p> <p><pre><code>sudo hostnamectl set-hostname &lt;new_hostname&gt;\n</code></pre> Replace <code>&lt;new_hostname&gt;</code> with your desired hostname.</p> Changing the hostname may affect network connectivity <p>See more Resolve kneopi.local with mDNS for further information</p>"},{"location":"configuration/config.html#networking-configuration","title":"Networking Configuration","text":"<p>Networking on your KNEO Pi can be configured for both Ethernet and Wi-Fi. Use the following steps to assign a static IP or enable DHCP for either interface.  The KNEO Pi uses NetworkManager as the default networking daemon</p> Check which Networking Daemon is used <p>Use the following command to see which daemon is <code>active</code> <pre><code>$ systemctl is-active NetworkManager\n$ systemctl is-active systemd-networkd\n$ systemctl is-active dhcpcd\n</code></pre></p>"},{"location":"configuration/config.html#assign-static-ip-or-dhcp","title":"Assign Static IP or DHCP","text":"<ul> <li> <p>View Available Connections     To check the status of your current connections or available interfaces:</p> <pre><code>$ nmcli connection show\n</code></pre> </li> <li> <p>Assign a Static IP     To configure a static IP for an interface (e.g., Ethernet or Wi-Fi):</p> <p><pre><code>$ nmcli con mod \"&lt;connection-name&gt;\" ipv4.addresses &lt;static-ip&gt;/&lt;subnet-mask&gt;\n$ nmcli con mod \"&lt;connection-name&gt;\" ipv4.gateway &lt;gateway-ip&gt;\n$ nmcli con mod \"&lt;connection-name&gt;\" ipv4.dns \"&lt;dns1&gt;,&lt;dns2&gt;\"\n$ nmcli con mod \"&lt;connection-name&gt;\" ipv4.method manual\n</code></pre> Replace <code>&lt;connection_name&gt;</code> with the NAME of your connection, usually <code>eth0</code> or <code>wlan0</code> Replace <code>&lt;static-ip&gt;</code>, <code>&lt;subnet-mask&gt;</code>, <code>&lt;gateway-ip&gt;</code>, <code>&lt;dns&gt;</code> according to your environment  </p> <p>For example (configure everything together) <pre><code>$ nmcli con mod eth0 ipv4.method manual ipv4.addresses \"192.168.1.100/24\" ipv4.gateway \"192.168.1.1\" ipv4.dns \"8.8.8.8\"\n</code></pre></p> </li> <li> <p>Enable DHCP (Enabled by default) <pre><code>$ nmcli con mod &lt;connection_name&gt; ipv4.method auto\n</code></pre></p> </li> <li> <p>Connect to Wi-Fi (optional)</p> <p>If using a USB Wi-Fi adapter, ensure it is recognized by the system, then connect to a Wi-Fi network:</p> Verified USB Wi-Fi adapters <ul> <li>tp-link Archer T3U Nano, rtl8822bu</li> <li>tp-link Archer T2U Nano, rtl8812au</li> </ul> <pre><code>$ nmcli device wifi list\n$ nmcli device wifi connect \"&lt;SSID&gt;\" password \"&lt;password&gt;\"\n</code></pre> <p>Once connected, confirm the assigned IP address using: <pre><code>$ nmcli device show wlan0 | grep IP4.ADDRESS  \n</code></pre></p> </li> <li> <p>Disconnect and reconnect the networks to make the changes effective</p> <p><pre><code>$ nmcli con down \"&lt;connection-name&gt;\"\n$ nmcli con up \"&lt;connection-name&gt;\"\n</code></pre> Replace <code>&lt;connection_name&gt;</code> with the NAME of your connection, usually <code>eth0</code> or <code>wlan0</code> </p> </li> </ul>"},{"location":"configuration/config.html#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"configuration/config.html#configure-usb-30-port-as-device-mode","title":"Configure USB 3.0 Port as Device Mode","text":"<p>The USB 3.0 port on the KNEO Pi can be configured to operate in device mode, allowing the KNEO Pi to function as a peripheral device when connected to a host system. Configure the USB 3.0 port to function in device mode</p> <pre><code>$ echo '1' | sudo tee /sys/class/usb_role/usb3/role\n</code></pre> <p>Warning</p> <ul> <li>Switching to device mode may interfere with other USB peripherals connected to the system.</li> <li>Reboot is required</li> </ul>"},{"location":"configuration/config.html#configure-mac-address","title":"Configure MAC Address","text":"<p>Set a custom MAC address for network interfaces.</p> <p><pre><code>$ ip link set dev eth0 address &lt;new_mac_address&gt;\n</code></pre> Replace  with the desired MAC address (e.g., 00:14:22:01:23:45). <p>Warning</p> <ul> <li>Changing the MAC address can affect network access if there are network policies based on MAC filtering.</li> <li>Reboot is required</li> </ul>"},{"location":"configuration/config.html#enabledisable-zram-as-swap-enabled-by-default","title":"Enable/Disable ZRAM as Swap (enabled by default)","text":"<p>Enable or disable the use of ZRAM for compressed swap space to gain larger memroy space. </p> <p>Command to enable/disable ZRAM: <pre><code>$ systemctl enable zram.service\n</code></pre></p> <pre><code>$ systemctl disable zram.service\n</code></pre> <p>Warning</p> <ul> <li>Enabling ZRAM can help performance on systems with limited RAM but may affect overall system stability if not properly configured.</li> <li>Reboot is required</li> </ul>"},{"location":"configuration/config.html#enabledisable-dummy-udc-usb-device-for-proprietary-npu-core-enabled-by-default","title":"Enable/Disable Dummy UDC USB Device for Proprietary NPU Core (enabled by default)","text":"<p>Enable or disable the dummy USB device used for the proprietary NPU core.</p> <p>Command to enable/disable:</p> <pre><code>$ systemctl enable nnm-usb-loopback.service\n</code></pre> <pre><code>$ systemctl disable nnm-usb-loopback.service\n</code></pre> <p>Warning</p> <ul> <li>This feature is specific to certain hardware configurations. Misuse may cause the NPU to become unresponsive.</li> <li>Reboot is required</li> </ul>"},{"location":"configuration/config.html#configure-usb-over-ethernet","title":"Configure USB over Ethernet","text":"<p>Enable USB over Ethernet functionality.</p> <p>Command:</p> <pre><code>$ modprobe usbnet\n</code></pre> <p>Warning</p> <p>Enabling USB over Ethernet will affect USB network traffic, so ensure this feature is needed for your use case.</p>"},{"location":"configuration/config.html#restricted-configurations","title":"Restricted Configurations","text":"<ul> <li>Keyboard Layout (US Layout Only)</li> <li>DDR Reservation for System</li> <li>Disable HDMI Display. Currently, mipi display is not supported in KNEO Pi usage.</li> </ul>"},{"location":"examples/basic_knowledge.html","title":"Examples","text":"<p>This section provides a collection of categorized examples to help you get started with development on KNEO Pi. Before diving into the examples, ensure you have a foundational understanding of several key concepts essential for working with KNEO Pi\u2019s advanced functionalities. Below, you\u2019ll find brief overviews of these prerequisites to enhance your understanding and streamline your experience.</p>"},{"location":"examples/basic_knowledge.html#prerequisites","title":"Prerequisites","text":"<p>To effectively follow and implement the examples provided, it\u2019s essential to be familiar with the following concepts:</p> <ul> <li> <p>Synchronous Shared Memory (SSM) SSM, or Synchronous Shared Memory, is a mechanism used to share data between processes or threads in a synchronized manner. This allows for efficient data exchange, ensuring that different components of your application can communicate and work together seamlessly without data corruption or timing issues.</p> </li> <li> <p>EDMC The EDMC is a memory management system designed to allocate and free contiguous physical memory blocks, which are often required for hardware access. EDMC ensures efficient memory handling, especially for applications that require consistent access to large memory blocks for hardware operations.</p> </li> <li> <p>Basic Concept of Data Flow in AI Model Execution The data flow typically follows a three-stage process:</p> <ul> <li>Data Preprocessing: Preparing and formatting data to meet the input requirements of the AI model. </li> <li>Inference: Running the data through the trained AI model to generate predictions or outputs.</li> <li>Post-Processing: Refining and formatting the output data for use in the application.</li> </ul> </li> </ul> <p>Understanding this basic workflow is crucial for implementing AI applications on KNEO Pi, where each stage requires specific hardware and software interactions.</p>"},{"location":"examples/basic_knowledge.html#example-categories","title":"Example Categories","text":"<p>With the prerequisites in mind, you\u2019re ready to explore our categorized examples, each designed to demonstrate specific functionalities and use cases of KNEO Pi.</p> <ol> <li>Basic System Operations  <ul> <li>Example: Accessing SSM for Data Sharing</li> <li>Example: Allocating and Freeing Memory with EDMC</li> </ul> </li> <li>AI Applications  <ul> <li>Example: Implementing Data Preprocessing for Image Recognition</li> <li>Example: Running Inference on KNEO Pi\u2019s NPU</li> <li>Example: Post-Processing Output Data for Real-Time Analysis</li> </ul> </li> <li>Hardware Control and Integration  <ul> <li>Example: Controlling GPIO for External Device Interaction</li> <li>Example: Managing External AI Dongles with the PLUS Library</li> </ul> </li> </ol> <p>Each example includes detailed instructions and explanations, guiding you through implementation while applying the key concepts outlined above. With these examples, you\u2019ll gain hands-on experience and deeper insight into the advanced capabilities of KNEO Pi.</p>"},{"location":"examples/edmc.html","title":"EDMC example","text":""},{"location":"examples/ssm.html","title":"ssm example","text":""},{"location":"examples/gpio_python/gpio_python.html","title":"Gpio python","text":"<p>How It Works: The user is asked to input Pin Headers that correspond to physical pins on the hardware platform. The script translates these Pin Headers to GPIO numbers using the pin_to_gpio dictionary. It exports the GPIO pins, sets them to output mode, and starts a loop where it toggles the pin state between LOW (LED ON) and HIGH (LED OFF) every 1 second. This script is useful for controlling devices like LEDs or other peripherals that respond to GPIO signals by turning them on or off at regular intervals.</p>"},{"location":"examples/h26xdec/h26xdec.html","title":"H264xDEC","text":""},{"location":"examples/h26xdec/h26xdec.html#name","title":"Name","text":"<p>h26xdec - h26x decoding</p>"},{"location":"examples/h26xdec/h26xdec.html#description","title":"Description","text":"<p>Kneron Pi provides an application called <code>h26xdec</code> designed for H26x video decoding demostrations. This application reads a video file and decode it into a series of YUV files.</p> <p>Before starting the decoding process, ensure that the appropriate driver is loaded.</p> <p>Here is a sample configuration file (config.ini) used for decoding: * codec: Specify the codec to use, 0 for H.264, 1 for H.265 * inputpath: Path to the input video file * outputpath: Path where the decoded YUV file will be saved * width and height: Define the resolution of the video * writefile: Set to 1 to save the decoded YUV file <pre><code>codec = 0   # 0:H264 1:H265\ninputpath = \"vtcs_srb_ch1_1920x1080.h264\"\noutputpath = \"test_1920x1080_264_decoder.yuv\"\nwidth = 1920\nheight = 1080\nwritefile = 1\n</code></pre></p> <p>Use the following command to start the decoding process: <pre><code>h26xdec -c config.ini\n</code></pre></p>"},{"location":"examples/h26xdec/h26xdec.html#synopsis","title":"Synopsis","text":"<p>h26xdec -c config.ini</p>"},{"location":"examples/h26xdec/h26xdec.html#options","title":"Options","text":"<p>-c Specify the decoding configuration file  </p>"},{"location":"examples/h26xdec/h26xdec.html#example","title":"Example","text":"<p>To decode the specified video file according to the parameters defined in the <code>config.ini</code> file and output a YUV file <pre><code>h26xdec -c config.ini\n\n# config.ini\n[config]\ncodec = 0   # 0:H264 1:H265\ninputpath = \"vtcs_srb_ch1_1920x1080.h264\"\noutputpath = \"test_1920x1080_264_decoder.yuv\"\nwidth = 1920\nheight = 1080\nwritefile = 1\n</code></pre></p>"},{"location":"examples/nnm/nnm.html","title":"Kneron NNM","text":"<p>Kneron Neural Network Management</p>"},{"location":"examples/nnm/nnm.html#1-description","title":"1. Description","text":"<p>Kneron NNM is a Kneron-developed, Linux-based framework, which allows users to access AI device on chip.</p>"},{"location":"examples/nnm/nnm.html#2-library","title":"2. Library","text":"<p>The NNM related libraries should be installed under /usr/lib/vtcs_root_leipzig/, and the header files should be under /usr/include/vtcs_root_leipzig/.</p> <p>Note : If your system environmnet does not contain the NNM library, please manually install the NNM via the instruction below before proceeding other development or building the NNM examples.</p> <ol> <li> <p>Download pre-built NNM package</p> </li> <li> <p>Execute the command</p> <pre><code>$ pacman -U nnm-1.0.0-1-aarch64.pkg.tar.xz\n</code></pre> </li> </ol>"},{"location":"examples/nnm/nnm.html#3-examples","title":"3. Examples","text":"<p>Note 1: The examples must be run under root account or sudo.</p> <p>Note 2: To build the OpenCV Example, OpenCV 3.x.x must be installed in your environment. You may also manually install the Kneron pre-build OpenCV via the instructions below:</p> <ol> <li> <p>Download pre-built OpenCV package</p> </li> <li> <p>Execute the command</p> </li> </ol>"},{"location":"examples/nnm/nnm.html#pacman-u-opencv3-opt-3420-2-anypkgtarxz","title":"<pre><code>$ pacman -U opencv3-opt-3.4.20-2-any.pkg.tar.xz\n</code></pre>","text":""},{"location":"examples/nnm/nnm.html#31-build-examples","title":"3.1 Build Examples","text":""},{"location":"examples/nnm/nnm.html#311-using-build-script","title":"3.1.1 Using Build Script","text":"<p>You can choose the individual example to build, or choose All examples.</p> <pre><code>$ sh build_all.sh\n\nPlease select the example(s) to be build:\n---------------- Basic Examples ----------------\n[1] example_nnm_image\n---------------- OpenCV Example ----------------\n[2] example_nnm_webcam\n---------------- All Examples ------------------\n[3] All examples\n\nPlease enter 1-3:\n</code></pre>"},{"location":"examples/nnm/nnm.html#312-manually-build-example","title":"3.1.2 Manually Build Example","text":"<p>Each example can be manually build via cmake. The following steps use exampe_nnm_image as a demonstration.</p> <pre><code>$ mkdir build\n$ cd build\n$ cmake ../exampe_nnm_image\n$ make\n</code></pre>"},{"location":"examples/nnm/nnm.html#32-execute-examples","title":"3.2 Execute Examples","text":"<p>The executable binary will be put in bin/. And you can execute then like the demonstration below:</p> <pre><code>$ cd bin\n$ sudo ./exampe_nnm_image\n</code></pre> <p>To Execute exampe_nnm_webcam, please enable the local display service first (enabled by default).</p> <ol> <li> <p>Execute on UART or SSH</p> <pre><code>$ cd bin\n$ sudo DISPLAY=:0 ./example_nnm_webcam\n</code></pre> </li> <li> <p>Execute on Local Display</p> <pre><code>$ cd bin\n$ sudo ./example_nnm_webcam\n</code></pre> </li> </ol> <p>The exampe_nnm_webcam will display the streaming from webcam with the inference result on local display.</p>"},{"location":"examples/plus_c/plus_c.html","title":"PLUS (C code)","text":"<p>Kneron Platform Library United Software</p>"},{"location":"examples/plus_c/plus_c.html#1-description","title":"1. Description","text":"<p>PLUS is a API-based software library, developed by Kneron, which allows users to manipulate the AI devices.</p>"},{"location":"examples/plus_c/plus_c.html#2-library","title":"2. Library","text":"<p>The PLUS library should be installed under /usr/lib/, and the header files should be under /usr/include/plus/.</p> <p>Note : If your system environmnet does not contain the PLUS library, please manually install the PLUS via the instruction below before proceeding other development or building the PLUS examples.</p> <ol> <li> <p>Download pre-built PLUS package</p> </li> <li> <p>Execute the command</p> <pre><code>$ pacman -U kneron_plus-3.0.0-1-aarch64.pkg.tar.xz\n</code></pre> </li> </ol>"},{"location":"examples/plus_c/plus_c.html#3-examples","title":"3. Examples","text":"<p>Note 1: To build the OpenCV Example, OpenCV 3.x.x must be installed in your environment. You may also manually install the Kneron pre-build OpenCV via the instructions below:</p> <ol> <li> <p>Download pre-built OpenCV package</p> </li> <li> <p>Execute the command</p> <pre><code>$ pacman -U opencv3-opt-3.4.20-2-any.pkg.tar.xz\n</code></pre> </li> </ol> <p>Note 2: The examples must be run under sudo. To remove this limitation, please follow the instruction below:</p> <ol> <li> <p>Add following rules in /etc/udev/rules.d/10-local.rules manually</p> <pre><code>SUBSYSTEM==\"usb\",ATTRS{product}==\"Kneron KL520\",ATTRS{idVendor}==\"3231\",ATTRS{idProduct}==\"0100\",MODE=\"0666\"\nSUBSYSTEM==\"usb\",ATTRS{product}==\"Kneron KL720l\",ATTRS{idVendor}==\"3231\",ATTRS{idProduct}==\"0200\",MODE=\"0666\"\nSUBSYSTEM==\"usb\",ATTRS{product}==\"Kneron KL720\",ATTRS{idVendor}==\"3231\",ATTRS{idProduct}==\"0720\",MODE=\"0666\"\nSUBSYSTEM==\"usb\",ATTRS{product}==\"Kneron KL630\",ATTRS{idVendor}==\"3231\",ATTRS{idProduct}==\"0630\",MODE=\"0666\"\nSUBSYSTEM==\"usb\",ATTRS{product}==\"Kneron KL730\",ATTRS{idVendor}==\"3231\",ATTRS{idProduct}==\"0732\",MODE=\"0666\"\n</code></pre> </li> <li> <p>Apply the new rules by following commands (Or reboot the host)</p> <pre><code>$ sudo udevadm control --reload-rules\n$ sudo udevadm trigger\n</code></pre> </li> </ol>"},{"location":"examples/plus_c/plus_c.html#31-build-examples","title":"3.1 Build Examples","text":""},{"location":"examples/plus_c/plus_c.html#311-using-build-script","title":"3.1.1 Using Build Script","text":"<p>You can choose the individual example to build, or choose All basic examples and All examples.</p> <pre><code>$ sh build_all.sh\n\nPlease select the example(s) to be build:\n---------------- Basic Examples ----------------\n[1] scan_devices\n[2] kl730_demo_generic_data_inference\n[3] kl730_demo_generic_image_inference\n[4] kl730_user_define_api\n[5] All basic examples\n---------------- OpenCV Example ----------------\n[6] kl730_demo_cam_user_define_api\n\n[7] All examples\n\nPlease enter 1-7:\n</code></pre>"},{"location":"examples/plus_c/plus_c.html#312-manually-build-example","title":"3.1.2 Manually Build Example","text":"<p>Each example can be manually build via cmake. The following steps use kl730_demo_generic_image_inference as a demonstration.</p> <pre><code>$ mkdir build\n$ cd build\n$ cmake ../kl730_demo_generic_image_inference\n$ make\n</code></pre>"},{"location":"examples/plus_c/plus_c.html#32-execute-examples","title":"3.2 Execute Examples","text":"<p>The executable binary will be put in bin/. And you can execute then like the demonstration below:</p> <pre><code>$ cd bin\n$ sudo ./kl730_demo_generic_image_inference\n\nconnect device ... OK\nupload firmware ... OK\nupload model ... OK\nread image ... OK\n\nstarting inference loop 10 times:\n..........\n\ninference loop is done\n\nnumber of output node : 3\n\nnode 0:\nshape [0]: 1:\nshape [1]: 255:\nshape [2]: 80:\nshape [3]: 80:\nnumber of data (float): 1632000:\nfirst 20 data:\n        0.617, 0.516, 0.469, 0.508, 0.523, 0.461,\n        0.430, 0.445, 0.531, 0.523, 0.531,\n        0.547, 0.516, 0.539, 0.500, 0.484,\n        0.492, 0.516, 0.484, 0.484,\n\nnode 1:\nshape [0]: 1:\nshape [1]: 255:\nshape [2]: 40:\nshape [3]: 40:\nnumber of data (float): 408000:\nfirst 20 data:\n        0.570, 0.438, 0.445, 0.461, 0.484, 0.375,\n        0.430, 0.477, 0.531, 0.555, 0.617,\n        0.664, 0.625, 0.586, 0.516, 0.492,\n        0.523, 0.531, 0.547, 0.477,\n\nnode 2:\nshape [0]: 1:\nshape [1]: 255:\nshape [2]: 20:\nshape [3]: 20:\nnumber of data (float): 102000:\nfirst 20 data:\n        0.492, 0.445, 0.484, 0.586, 0.484, 0.367,\n        0.406, 0.438, 0.461, 0.461, 0.469,\n        0.477, 0.547, 0.523, 0.562, 0.523,\n        0.531, 0.555, 0.523, 0.367,\n\ndumped node 0 output to 'output_car_park_barrier_608x608_node0_1x255x80x80.txt'\ndumped node 1 output to 'output_car_park_barrier_608x608_node1_1x255x40x40.txt'\ndumped node 2 output to 'output_car_park_barrier_608x608_node2_1x255x20x20.txt'\n</code></pre>"},{"location":"examples/plus_python/plus_python.html","title":"PLUS (C code)","text":"<p>Kneron Platform Library United Software</p>"},{"location":"examples/plus_python/plus_python.html#1-description","title":"1. Description","text":"<p>PLUS is a API-based software library, developed by Kneron, which allows users to manipulate the AI devices.</p>"},{"location":"examples/plus_python/plus_python.html#2-install-dependency","title":"2. Install Dependency","text":"<p>Before execute any examples, please install the dependent module and wheel file first.</p> <ol> <li>Install dependencies</li> </ol> <pre><code>$ sudo pacman -S python-pip python-numpy python-opencv\n</code></pre> <ol> <li>Install wheel</li> </ol> <pre><code>$ sh install_package.sh\n</code></pre>"},{"location":"examples/plus_python/plus_python.html#3-privilege-setting","title":"3. Privilege Setting","text":"<p>Before running any examples, please follow the instruction below to eliminate the privilege issue.</p> <ol> <li> <p>Add following rules in /etc/udev/rules.d/10-local.rules manually</p> <pre><code>SUBSYSTEM==\"usb\",ATTRS{product}==\"Kneron KL520\",ATTRS{idVendor}==\"3231\",ATTRS{idProduct}==\"0100\",MODE=\"0666\"\nSUBSYSTEM==\"usb\",ATTRS{product}==\"Kneron KL720l\",ATTRS{idVendor}==\"3231\",ATTRS{idProduct}==\"0200\",MODE=\"0666\"\nSUBSYSTEM==\"usb\",ATTRS{product}==\"Kneron KL720\",ATTRS{idVendor}==\"3231\",ATTRS{idProduct}==\"0720\",MODE=\"0666\"\nSUBSYSTEM==\"usb\",ATTRS{product}==\"Kneron KL630\",ATTRS{idVendor}==\"3231\",ATTRS{idProduct}==\"0630\",MODE=\"0666\"\nSUBSYSTEM==\"usb\",ATTRS{product}==\"Kneron KL730\",ATTRS{idVendor}==\"3231\",ATTRS{idProduct}==\"0732\",MODE=\"0666\"\n</code></pre> </li> <li> <p>Apply the new rules by following commands (Or reboot the host)</p> <pre><code>$ sudo udevadm control --reload-rules\n$ sudo udevadm trigger\n</code></pre> </li> </ol>"},{"location":"examples/plus_python/plus_python.html#4-examples","title":"4. Examples","text":"<p>The following uses the example KL730DemoAppYoloInference.py as a demonstration</p> <p><code>bash $ python KL730DemoAppYoloInference.py [Connect Device]  - Success [Set Device Timeout]  - Success [Upload Firmware]  - Success [Upload Model]  - Success [Read Image]  - Success [Starting Inference Work]  - Starting inference loop 50 times  - .................................................. [Result] {     \"class_count\": 80,     \"box_count\": 10,     \"box_list\": {         \"0\": {             \"x1\": 45.01533126831055,             \"y1\": 71.1539077758789,             \"x2\": 93.58466339111328,             \"y2\": 181.89608764648438,             \"score\": 0.82940673828125,             \"class_num\": 0         },         \"1\": {             \"x1\": 59.05344009399414,             \"y1\": 128.445556640625,             \"x2\": 86.89655303955078,             \"y2\": 202.304443359375,             \"score\": 0.630615234375,             \"class_num\": 1         },         \"2\": {             \"x1\": 95.84539794921875,             \"y1\": 89.2368392944336,             \"x2\": 130.60459899902344,             \"y2\": 123.2131576538086,             \"score\": 0.8681640625,             \"class_num\": 2         },         \"3\": {             \"x1\": 0.17790527641773224,             \"y1\": 79.81546783447266,             \"x2\": 37.622093200683594,             \"y2\": 174.98452758789062,             \"score\": 0.8558349609375,             \"class_num\": 2         },         \"4\": {             \"x1\": 111.28641510009766,             \"y1\": 78.0573501586914,             \"x2\": 132.31358337402344,             \"y2\": 90.9926528930664,             \"score\": 0.732421875,             \"class_num\": 2         },         \"5\": {             \"x1\": 32.08002853393555,             \"y1\": 78.92499542236328,             \"x2\": 52.444969177246094,             \"y2\": 94.67499542236328,             \"score\": 0.7056884765625,             \"class_num\": 2         },         \"6\": {             \"x1\": 117.6562271118164,             \"y1\": 78.06546783447266,             \"x2\": 223.2437744140625,             \"y2\": 173.23452758789062,             \"score\": 0.600830078125,             \"class_num\": 2         },         \"7\": {             \"x1\": 52.1870002746582,             \"y1\": 81.20734405517578,             \"x2\": 68.21299743652344,             \"y2\": 94.14264678955078,             \"score\": 0.58447265625,             \"class_num\": 2         },         \"8\": {             \"x1\": 86.5716781616211,             \"y1\": 75.01689147949219,             \"x2\": 101.3783187866211,             \"y2\": 85.10810089111328,             \"score\": 0.56005859375,             \"class_num\": 2         },         \"9\": {             \"x1\": 101.5492172241211,             \"y1\": 77.47010040283203,             \"x2\": 110.0257797241211,             \"y2\": 84.57990264892578,             \"score\": 0.52294921875,             \"class_num\": 2         }     } } [Output Result Image]  - Output bounding boxes on 'output_bike_cars_street_224x224.bmp'</code></p>"},{"location":"examples/usb_camera/usb_camera.html","title":"usb camera","text":"<p>Connecting a usb camera</p>"},{"location":"examples/usb_camera/usb_camera.html#description","title":"Description","text":"<p>KNEO Pi supplies an anplication called <code>usb_camera</code> for connect usb camera. This application captures images from a usb camera.</p>"},{"location":"examples/usb_camera/usb_camera.html#synopsis","title":"Synopsis","text":"<p>usb_camera [OPTION]</p>"},{"location":"examples/usb_camera/usb_camera.html#options","title":"Options","text":"<p>-W Camera width</p> <p>-H Camera height</p>"},{"location":"examples/usb_camera/usb_camera.html#example","title":"Example","text":"<p>To run usb_camera, you need to bring in the camera width and height.  <pre><code>usb_camera -W 640 -H 480 \n</code></pre></p>"},{"location":"examples/venc1/venc1.html","title":"VENC1","text":"<p>venc1 - video encoding</p>"},{"location":"examples/venc1/venc1.html#description","title":"Description","text":"<p>KNEO Pi supplies an anplication called <code>venc1</code> for video encoding demonstrations. This application captures images from a sensor and encodes using a specified codec type.</p> <p>To use VLC to stream venc1 video over RTSP using a KNEO Pi as a server, use the following command: <pre><code>rtsps -c stream_server_config.ini &amp;\n</code></pre> Alternatively, use the following command on a client to stream using VLC: <pre><code>vlc rtsp://&lt;ip-address-of-server&gt;/live1.sdp\n</code></pre></p>"},{"location":"examples/venc1/venc1.html#synopsis","title":"Synopsis","text":"<p>venc1 [OPTION]</p>"},{"location":"examples/venc1/venc1.html#options","title":"Options","text":"<p>-c Specify the sensor configuration file  </p> <p>-C Codec type selection - 0: H264 - 1: H265 - 2: MJPEG</p> <p>-a Specify the auto scene configuration file  </p> <p>-t Specify the encode buffer type - 0: SRB mode - 1: SCM mode</p> <p>-f Enable IFPE only  </p> <p>-m FEC mapping algorithm selection - 0: GTR (hardware) - 1: CGE (software)</p> <p>-M Open metadata thread  </p> <p>-p Encoder mode - 0: One frame - 1: Start wait - 2: Slice</p>"},{"location":"examples/venc1/venc1.html#example","title":"Example","text":"<p>Load sensor with autoscene config and encode images with H264 codec <pre><code>venc1 -c Resource/VIC/0/os05a10_2560x1920_ch0.cfg -C 0 -a Resource/Autoscene/autoscene_conf.cfg\n</code></pre></p>"},{"location":"getting-started/boot.html","title":"Booting and Accessing KNEO Pi","text":"<p>There are several ways to boot and access your KNEO Pi, depending on your setup and hardware availability. Follow the method that best suits your environment.</p>"},{"location":"getting-started/boot.html#local-access","title":"Local Access","text":"<p>If you do not have access to a LAN or Wi-Fi connection, you can directly interact with the KNEO Pi by connecting a keyboard, mouse, and monitor:</p> <ul> <li>Insert the microSD card with prepared OS into the KNEO Pi.</li> <li>Connect a keyboard, mouse, and monitor to the KNEO Pi via USB and HDMI ports, respectively.</li> <li>Plug in the USB-C power, and the KNEO Pi will boot to the operating system within a few minutes.</li> <li>Once booted, you can use the keyboard and mouse to interact with the KNEO Pi and install any required software or updates.</li> </ul> login account/password <ul> <li>root/root   for root permission    </li> <li>alarm/alarm for normal permission</li> </ul>"},{"location":"getting-started/boot.html#network-access-lan","title":"Network Access (LAN)","text":"<p>If you connect the KNEO Pi to a LAN, DHCP is enabled by default, meaning it will automatically obtain an IP address. To find the assigned IP:</p> <ul> <li>Insert the microSD card with prepared OS into the KNEO Pi.</li> <li>Plug in the USB-C power, and the KNEO Pi will boot to the operating system within a few minutes.</li> <li>Via the opened terminal on the KNEO Pi. Run the command: <code>ifconfig</code>.</li> <li>Note the IP address assigned to the network interface.</li> <li>Once you have the IP, you can access the KNEO Pi remotely via SSH:     <pre><code>#Replace &lt;kneo_pi_ip_address&gt; with the actual IP address of your KNEO Pi.\nssh alarm@&lt;kneo_pi_ip_address&gt;\n</code></pre></li> </ul> <p>Info</p> <p>For security reasons, SSH login as the root user is disabled by default. After logging in, you can switch to the root user using the <code>su</code> command.</p>"},{"location":"getting-started/boot.html#network-access-wlan","title":"Network Access (WLAN)","text":"<p>For WiFi access, you\u2019ll need to connect an external USB WiFi module to the KNEO Pi. See Networking Configuration for details.</p>"},{"location":"getting-started/boot.html#headless-access-via-uart-no-monitorkeyboard","title":"Headless Access via UART (No Monitor/Keyboard)","text":"<p>For headless usage without a connected monitor or keyboard/mouse, you can access the KNEO Pi using a USB-to-TTL serial cable through a console tool:</p> <ul> <li>Insert the microSD card with prepared OS into the KNEO Pi.</li> <li>Connect the USB-to-TTL serial cable to your computer and the GPIO pin header KNEO Pi.  <ul> <li>GND at pin-6, TX at pin-8 and RX at pin-10</li> </ul> </li> <li>Use a console tool (e.g., <code>Minicom</code> or <code>PuTTY</code>) to connect to the KNEO Pi  </li> <li>Configure the console tool with the appropriate baud rate and settings  <ul> <li>Unix: ttyUSB, baud-rate: 115200, Data bits: 8, Parity: N, stop bits: 1 <li>windows: COM,    baud-rate: 115200, Data bits: 8, Parity: N, stop bits: 1 <li>Plug in the USB-C power, and the KNEO Pi will boot to the operating system within a few minutes.</li> <li>Once connected, you will have console access to control and manage the device, even without a network connection.</li> <p></p> <p>Tip</p> <p>The USB-to-TTL serial cable is also used for receiving kernel messages.</p>"},{"location":"getting-started/install.html","title":"Install an OS","text":"<p>To use the KNEO Pi, you\u2019ll need an operating system. KNEO Pi checks for an operating system on any SD card inserted in the SD card slot. To install an operating system on a microSD card for KNEO Pi, you\u2019ll need:</p> <ul> <li>a computer you can use to image the microSD card into a boot device</li> <li>a way to plug the microSD card into that computer</li> </ul> <p>This document is used for starting up KNEO Pi via a defined image file with KNEO Pi OS</p>"},{"location":"getting-started/install.html#prepare-the-microsd-card","title":"Prepare the microSD card","text":"<p>For Windows users, the following steps will guide you through the process using a tool called Win32DiskImager</p>"},{"location":"getting-started/install.html#1-download-the-image-file","title":"1. Download the Image File","text":"<p>Visit Kneron Develop Center , under the KNEO Pi section, to download the predefinded OS image file. In this case, the file is named <code>kneo_pi_rdk_12G_{version}.img.xz</code>. <code>release_notes.txt</code> is maintained to document the history of changes. After the download is complete, locate the downloaded file on your computer. It should have the .xz extension, meaning it is compressed.   </p> <p>Internal Image Download</p> <p>Download the latest version from the Image file folder. [Releas Notes]</p> <p>(Optional) To ensure the integrity of your downloaded file, follow these steps to verify it with the provided .md5 file:</p> <ol> <li>Place the downloaded image file and its corresponding .md5 file in the same directory.</li> <li>Run the following command in a terminal to compare the MD5 checksums.     <pre><code>md5sum -c kneo_pi_rdk_12G_{version}.img.xz\n</code></pre></li> <li> <p>Check the output: </p> <ul> <li>If the download is valid, you\u2019ll see a message like: <code>kneo_pi_rdk_12G_{version}.img.xz: OK</code>.</li> <li>If there\u2019s an issue, the output will indicate a checksum mismatch, meaning the download may be corrupted.</li> </ul> </li> </ol>"},{"location":"getting-started/install.html#2-extract-the-image-file","title":"2. Extract the Image File","text":"<p>Before writing the image to the microSD card, you will need to extract the contents of the compressed file: Right-click on the <code>.xz</code> file and select Extract from the context menu.  After extraction, you should see a new file named <code>xxx.img</code> which is the uncompressed image file that we will use.        </p> <p>Tip</p> <p>you may need to install a tool like 7-Zip or WinRAR if your decompress tool cannot handle <code>.xz</code> files.</p>"},{"location":"getting-started/install.html#3-install-and-open-win32diskimager","title":"3. Install and Open Win32DiskImager","text":"<p>(For Windows 10/11 user) Now, we will use <code>Win32DiskImager</code> to write the extracted image file to the microSD card. If you haven't installed <code>Win32DiskImager</code> yet, follow these instructions:  </p> <ul> <li> <p>Download <code>Win32DiskImager</code>: Go to the Win32DiskImager website  and download the latest version of the software.</p> </li> <li> <p>Install the Software: Run the installer and follow the on-screen instructions to install <code>Win32DiskImager</code> on your computer.</p> </li> <li> <p>Open <code>Win32DiskImager</code>: After installation, open the program by double-clicking its icon on the desktop or finding it in the Start Menu.  </p> </li> </ul> Alternates for Linux/Mac user <p>For Linux and Mac users, there are several alternative imager tools to choose from Raspberry Pi Imager , Etcher , etc.</p>"},{"location":"getting-started/install.html#4-insert-the-microsd-card","title":"4. Insert the microSD Card","text":"<p>Insert the microSD card into your computer's card reader. Ensure the card is properly connected and recognized by your system.  </p>"},{"location":"getting-started/install.html#5-write-the-image-to-the-microsd-card","title":"5. Write the Image to the microSD Card","text":"<p>In the Win32DiskImager window:</p> <ul> <li>Select the image file:  Click the folder icon next to the Image File field, navigate to the location where you extracted <code>.img</code> file, and select it.</li> <li>Choose the device: In the Device dropdown menu, select the drive corresponding to your microSD card. Be very careful to select the correct drive, as writing the image will overwrite any data on that drive.</li> <li>Double-check that the correct image file and microSD card are selected, then click the Write button.</li> <li>A confirmation dialog will appear, warning that all data on the selected drive will be erased. Click Yes to proceed.  The writing process will begin, and you will see a progress bar. This may take several minutes, depending on the size of the image and the speed of your microSD card. Once the process is complete, a message will appear saying \"Write Successful.\" You can now safely eject the microSD card from your computer.  </li> </ul>"},{"location":"getting-started/install.html#6-safely-eject-the-microsd-card","title":"6. Safely Eject the microSD Card","text":"<ul> <li>In the system tray (bottom-right corner of the screen), click the Safely Remove Hardware icon.   </li> <li>Select the microSD card and click Eject.   </li> <li>Once Windows confirms it is safe, remove the microSD card from the reader.   </li> <li>Your microSD card is now ready to boot your KNEO Pi.  </li> </ul>"},{"location":"getting-started/remote.html","title":"Remote Control of KNEO Pi","text":"<p>In many scenarios, you may need to access your KNEO Pi without a monitor, keyboard, or mouse. For example, the KNEO Pi might be installed in a remote or difficult-to-reach location, or you simply don\u2019t have a spare monitor available. </p> <p>For application development, remote control via network access is highly recommended. This method allows you to:  </p> <ul> <li>Easily download libraries, tools, and packages from the internet.  </li> <li>Leverage your PC's computational power for tasks like cross-compiling.  </li> <li>Manage and develop projects more efficiently, reducing the constraints of the KNEO Pi\u2019s onboard resources.  </li> </ul> <p>SSH provides command-line access for lightweight and efficient terminal management, while VNC delivers a full graphical desktop interface for users who prefer a visual approach.  </p> <p>Follow the steps in this guide to set up and use the method that best suits your needs.</p>"},{"location":"getting-started/remote.html#find-the-ip-address","title":"Find the IP address","text":"<p>To connect to your KNEO Pi remotely using SSH or VNC, you first need to know its local IP address. This is the unique address assigned to the KNEO Pi by your Local Area Network (LAN).  </p> <p>If you have a display connected to your KNEO Pi, identifying the IP address is straightforward. However, if you're working without a monitor, there are several ways to find it from another machine on the same network.  </p> <p>Choose one of the methods below to locate the local IP address of your KNEO Pi. </p>"},{"location":"getting-started/remote.html#using-the-desktop-gui","title":"Using the Desktop GUI","text":"<ol> <li>Right-click on the network icon in the system tray.  </li> <li>Select Connection Information from the menu.  </li> <li>A window will appear showing details about your current network connection, including the IP address of your KNEO Pi.  </li> </ol> <p>This method is quick and straightforward if you have access to the KNEO Pi\u2019s desktop environment.  </p> Hardware Connection Reference <p>For local access usage with a monitor and keyboard connected to the KNEO Pi, or see headless access usage with TTL cable connected. </p>"},{"location":"getting-started/remote.html#using-ifconfig-command","title":"Using <code>ifconfig</code> command","text":"<ol> <li>Open a terminal on the KNEO Pi.  </li> <li>Run the following command:     <pre><code>$ ifconfig\n</code></pre></li> <li>Look for the inet entry under the active network interface (e.g., <code>eth0</code> or <code>wlan0</code>) for the assigned IP.</li> </ol>"},{"location":"getting-started/remote.html#using-nmcli-command","title":"Using <code>nmcli</code> command","text":"<p>You can use the built-in Network Manager CLI (nmcli) to retrieve network details. Follow these steps:</p> <ol> <li>Open a terminal on the KNEO Pi.  </li> <li>Run the following command: <pre><code>$ nmcli device show\n</code></pre></li> <li> <p>The output will display information for all network interfaces available on your KNEO Pi.</p> <ul> <li>Locate the GENERAL.TYPE row to identify the type of network interface.    For example, the ethernet block refers to the Ethernet port.</li> <li>Find the IP4.ADDRESS[1] field within the relevant block to see the IPv4 address. You can ignore the trailing slash and number (e.g., /24).  </li> </ul> <p>For example, if your KNEO Pi uses an Ethernet connection, check the block where GENERAL.TYPE reads ethernet and note the address under IP4.ADDRESS[1]. This IPv4 address is what you\u2019ll use to access the device.</p> </li> </ol>"},{"location":"getting-started/remote.html#resolve-kneo-pilocal-with-mdns","title":"Resolve kneo-pi.local with mDNS","text":"<p>KNEO Pi OS supports multicast DNS (mDNS) through the Avahi service, enabling hostname resolution within the local network.  </p> <p>If your host PC also supports mDNS, you can access the KNEO Pi using its default hostname and the <code>.local</code> suffix. By default, the hostname for a fresh KNEO Pi OS installation is <code>kneo-pi</code>. To resolve the IP address, use the following command from your host PC:  </p> <pre><code>$ ping -c 1 kneo-pi.local\n</code></pre> <p>For example, if the KNEO Pi is reachable, ping from your Host PC will show the IP address: <pre><code>$ ping -c 1 kneo-pi.local\n\nPING kneo-pi.local (192.168.1.100) 56(84) bytes of data.\n64 bytes from 192.168.1.100 (192.168.1.100): icmp_seq=1 ttl=64 time=0.394 ms\n</code></pre> This will resolve the hostname kneo-pi.local to its IP address. <code>192.168.1.100</code> shown above is the resolved IP.</p> Not working if your local network has more than one KNEO Pi <p>The hostname of the device booted later may automatically change, causing this method to fail. In such cases, use alternative methods.</p>"},{"location":"getting-started/remote.html#checking-your-network-router-or-switch","title":"Checking Your Network Router or Switch","text":"<ul> <li>Many network routers or managed switches display a list of connected devices, including their IP addresses. </li> <li>Check your router\u2019s administration page and look for the KNEO Pi\u2019s IP in the device list.</li> </ul>"},{"location":"getting-started/remote.html#using-nmap-from-your-host-pc","title":"Using <code>nmap</code> from Your Host PC","text":"<ul> <li>Use the <code>nmap</code> tool download  on your host PC to scan your network for connected devices:     <pre><code>$ nmap -sn 192.168.1.0/24\n</code></pre>     Replace 192.168.1.0/24 with your local network range. Look for the KNEO Pi in the scan results.</li> </ul>"},{"location":"getting-started/remote.html#connecting-to-kneo-pi-with-ssh","title":"Connecting to KNEO Pi with SSH","text":"<p>By default, KNEO Pi OS disables the SSH server. Once you have the IP address, follow these steps to connect via SSH:</p> <ul> <li>Open a terminal on your host PC.</li> <li>Use <code>ssh</code> command to establish an SSH connection: <pre><code>$ ssh alarm@KNEOPi_IP\n</code></pre> Accept the SSH key if prompted (this happens the first time you connect to a new device).</li> <li>Enter the password. See local access usage page for the password.  </li> <li>You should now be remotely connected to your KNEO Pi and can control it from your host PC terminal.</li> </ul> Access with username <code>root</code> is disabled <p>By default, if you have not created a new user account manually,  should be <code>alarm</code>. For security reasons, SSH and SCP connections as root are disabled. After logging in, you can switch to the root user using the <code>su</code> command."},{"location":"getting-started/remote.html#connecting-to-kneo-pi-with-vnc","title":"Connecting to KNEO Pi with VNC","text":"<p>By default, KNEO Pi OS disables the SSH server. Once you have the IP address, follow these steps to connect via VNC:</p> <ul> <li>Open the VNC viewer on your host PC.</li> <li>Enter the KNEO Pi\u2019s IP address</li> <li>you should now see the KNEO Pi desktop environment on your host PC.</li> </ul> VNC viewer options <p>To connect to KNEO Pi via VNC, you\u2019ll need a VNC viewer on your host PC. Here are a few popular options: - TigerVNC Viewer  - RealVNC Viewer </p>"},{"location":"getting-started/remote.html#transferring-files-with-scp","title":"Transferring Files with SCP","text":"<p>The Secure Copy Protocol (SCP) allows you to transfer files over SSH, enabling secure file copying between your KNEO Pi and another computer. Below is a guide to using <code>scp</code> for various file transfer scenarios. To use scp, find your KNEO Pi\u2019s IP address first.</p>"},{"location":"getting-started/remote.html#copying-files-to-your-kneo-pi","title":"Copying Files to Your KNEO Pi","text":"<p>To copy a file from your host to a specific directory of your KNEO Pi, simply add the directory path after the <code>:</code> in the scp command. Note that the target directory must already exist, as scp does not create directories automatically.</p> <p>For example, the following command transfers a file named <code>myfile.txt</code> into the <code>project/</code> directory within the <code>alarm</code>\u2019s home folder: <pre><code>$ scp myfile.txt alarm@&lt;KNEPPi_IP&gt;:project/\n</code></pre></p>"},{"location":"getting-started/remote.html#copying-files-from-your-kneo-pi","title":"Copying Files from Your KNEO Pi","text":"<p>To transfer files from your KNEO Pi to another computer, simply reverse the source and target paths in the scp command.</p> <p>For example, the following command copies a file named <code>myfile.txt</code> from the <code>project/</code> directory under <code>alarm</code>'s home folder on your KNEO Pi to the current directory on your local machine:</p> <pre><code>$ scp alarm@&lt;KNEOPi_IP&gt;:project/myfile.txt .\n</code></pre>"},{"location":"getting-started/remote.html#synchronise-folders-between-computers-with-rsync","title":"Synchronise folders between computers with rsync","text":"<p>You can use the <code>rsync</code> utility to synchronize folders between your KNEO Pi and another computer efficiently. For example, you can automate the transfer of files such as logs, images, or data generated by your KNEO Pi.</p> <p>Before proceeding, ensure you know the following details:</p> <ul> <li><code>KNEOPi_IP</code>: find your KNEO Pi\u2019s IP address.   </li> <li><code>username</code>: The username used to log in to your KNEO Pi (typically <code>alarm</code> unless you have created a custom user).  </li> <li><code>remote_folder</code>: The directory on your KNEO Pi that contains the files to be synchronized.  </li> <li><code>local_folder</code>: The directory on your personal computer where the files will be stored.   </li> </ul> <p>Steps:   </p> <ol> <li> <p>Create the Local Folder on Your PC     On your personal computer, create the destination folder for synchronization using the mkdir command:     <pre><code>$ mkdir &lt;local_folder&gt;\n</code></pre></p> </li> <li> <p>Synchronize Files Using <code>rsync</code>     Run the following command to synchronize files from the KNEO Pi to your local computer:     <pre><code>$ rsync -avz -e ssh &lt;username&gt;@&lt;KNEOPi_IP&gt;:&lt;remote_folder&gt;/ &lt;local_folder&gt;/\n</code></pre></p> Explanation of the Options <p><code>-a</code>: Archive mode to preserve file permissions and attributes. <code>-v</code>: Verbose mode for detailed output. <code>-z</code>: Compress data during transfer to save bandwidth. <code>-e ssh</code>: Use SSH for secure data transfer.</p> <p>This command transfers all files from the specified folder on your KNEO Pi to the designated folder on your computer. If run again, rsync only updates new or modified files, making subsequent synchronizations faster and more efficient.</p> </li> <li> <p>Automate Updates If you modify or delete files in the source folder on the KNEO Pi, running the same <code>rsync</code> command ensures the changes are reflected on your personal computer.</p> </li> </ol>"},{"location":"getting-started/setting-up.html","title":"Getting started with KNEO Pi","text":"<p>To get started with KNEO Pi, you\u2019ll need the following:</p> <ul> <li>a power supply</li> <li>boot media - A microSD card with size larger than 16GB</li> </ul> <p>You can configure your KNEO Pi in two ways: either as an interactive computer with a desktop or as a headless system accessed remotely over the network. For a headless setup, no extra peripherals are needed. During the operating system installation, you can preconfigure the hostname, user account, network settings, and SSH access. However, if you prefer direct use of the KNEO Pi, you'll need these additional accessories:</p> <ul> <li>A HDMI display </li> <li>A micro-HDMI cable to connect the display to KNEO Pi</li> <li>A USB-A keyboard and mouse</li> </ul>"},{"location":"getting-started/setting-up.html#power-supply","title":"Power supply","text":"<p>Recommended power supply (voltage/current) : 5V/4A USB-C power adapter  Plug your power supply into the USB-C port on KNEO Pi. </p> <p>Info</p> <ul> <li>You can use any high-quality power supply that provides the correct power mode.</li> <li>The USB-C port is for power only and does not support data communication.</li> </ul> <p>Warning</p> <p>If the connected device draws too much power from the 40-pin header, the system might become unstable due to insufficient power.</p>"},{"location":"getting-started/setting-up.html#boot-media","title":"Boot media","text":"<p>KNEO Pi supports both external microSD cards and an onboard 4Gbit flash as boot media. A DIP switch enables you to toggle between these two options. Adjust the switch as shown in the following image. Due to the limited onboard storage, external storage is recommended. You can boot the KNEO Pi from an operating system image on a microSD card, which also provides ample space for development tools and software installations.</p> <p>This documentation focuses exclusively on the usage of microSD cards.</p> <p></p>"},{"location":"getting-started/setting-up.html#keyboard-and-mouse","title":"Keyboard and Mouse","text":"<p>You can use the USB 2.0 port on the KNEO Pi to connect a wired keyboard or mouse. If you need to connect multiple devices, a USB hub will be required.</p>"},{"location":"getting-started/setting-up.html#display","title":"Display","text":"<p>KNEO Pi has display connectivity through micro HDMI.   </p> <p>Most displays don\u2019t have a micro-HDMI port. However, you can use a micro-HDMI-to-HDMI cable to connect the KNEO Pi to any HDMI-compatible display. If your display doesn\u2019t support HDMI, consider using an adapter to convert the HDMI output to a compatible port for your display.</p> <p></p>"},{"location":"getting-started/setting-up.html#audio","title":"Audio","text":"<p>KNEO Pi features a 3.5mm TRRS jack that supports both audio output and microphone input.</p> <p>Warning</p> <p>KNEO Pi 3.5mm audio jack supports CTIA(AHJ) standard only.</p>"},{"location":"getting-started/setting-up.html#networking","title":"Networking","text":""},{"location":"kneopi-hw/introduction.html","title":"Introduction","text":"<p>The KNEO Pi is a versatile single-board computer designed for embedded systems, AI projects, and IoT applications. It combines powerful processing capabilities with advanced AI features, offering developers an efficient and compact platform for a wide range of projects.</p>"},{"location":"kneopi-hw/introduction.html#board-preview","title":"Board Preview","text":""},{"location":"kneopi-hw/introduction.html#board-specifications","title":"Board Specifications:","text":"Item Specifications SoC Kneron KLM730A DDR 2 GB 32-bit LPDDR4-3040 Flash 512MB SPI NAND Flash Network RJ45 10/100 RMII Console 4 pin UART interface I/O 40 pin GPIOs Video output micro-HDMI output USB USB 2.0/3.0 host/device Audio 3.5mm Line in / Line out SD Card Micro SD Power USB type C 5V/2A <p>With its powerful AI capabilities, flexible I/O, and user-friendly design, the KNEO Pi is well-suited for developers looking to explore AI projects or build IoT systems that require both performance and expandability.</p>"},{"location":"kneopi-hw/processor.html","title":"Processor - Kneron KLM730","text":"<p>This is the Kneron chip used in the KNEO Pi. It is a quad-core ARM Cortex A55 (ARMv8) cluster. Please refer to the following KLM730 document for details on the ARM peripherals specification.</p> <ul> <li>Processor: Quad-core Cortex-A55 (ARM v8) 64-bit SoC @ 1.1 GHz.  </li> <li>NPU: 3.6 eTOPS (GPU-equivalent TOPS) Kneron\u00ae 4th generation KDP series AI processor  </li> <li>DSP: 900MHz TensilicaTM Vision Q7 CV processor  </li> <li>Memory: 32-bit LPDDR4-3040 SDRAM interface up to 16Gb capacity.  </li> <li>Caches: 32 KB L1 instruction cache, 32 KB L1 data cache, and 1MB L3 cache.  </li> <li>Multimedia: H.265/H.264 encode/decode  </li> <li>I/O: onboard Ethernet port, 1 \u00d7 DSI port, 2 \u00d7 CSI ports, up to 3 \u00d7 I2C, up to 5 x UART (muxed with I2C), up to 4 \u00d7 SPI, HDMI video output, composite video output.  </li> </ul> <p>The datasheet below contains further details:</p> <ul> <li>Kneron KLM730 datasheet brief </li> <li>ARM Cortex-A53 MPCore Processor Technical Reference Manual </li> </ul>"},{"location":"os/os.html","title":"Introduction to KNEO Pi OS","text":"<p>KNEO Pi OS is a free, lightweight operating system designed specifically for the KNEO Pi hardware platform. It is based on ArchLinux ARM , which ensures a highly flexible and customizable environment for developers and users alike.</p>"},{"location":"os/os.html#key-features-of-kneo-pi-os","title":"Key Features of KNEO Pi OS","text":""},{"location":"os/os.html#archlinux-arm-based","title":"ArchLinux ARM-Based","text":"<p>KNEO Pi OS is built based on the ArchLinux ARM, offering the simplicity and transparency of a minimal, rolling-release distribution. Users can leverage the extensive ArchLinux ARM package ecosystem, providing access to thousands of software packages, tools, and libraries for development, system customization, and general use.</p>"},{"location":"os/os.html#extensive-package-support","title":"Extensive Package Support","text":"<p>Thanks to its ArchLinux ARM foundation, KNEO Pi OS takes full advantage of the rich repository of software packages  available. Users can install and update packages using the Pacman package manager , known for its speed and simplicity. This ensures that the system stays up to date with the latest software and security patches, while also enabling users to customize their environment to suit specific project needs.</p>"},{"location":"os/os.html#proprietary-hardware-acceleration","title":"Proprietary Hardware Acceleration","text":"<p>KNEO Pi OS features built-in support for the Neural Processing Unit (NPU), enabling efficient AI inference, along with a proprietary hardware ISP that enhances video and audio streaming for smooth playback and efficient media processing. A lightweight SDK is provided for implementing a wide range of AIoT applications.</p>"},{"location":"os/pacman.html","title":"Software Management on KNEO Pi","text":"<p>KNEO Pi OS, being based on ArchLinux ARM, uses the powerful and versatile Pacman  package manager to handle software management. Pacman simplifies the process of installing, updating, and removing software packages, while also providing features to manage system resources, such as clearing the package cache to save disk space.</p> <p>Important</p> <p>You must switch to the root account for Pacman commands.</p> <p>Below are some basic pacman commands to help you manage software on your KNEO Pi:</p>"},{"location":"os/pacman.html#search-for-a-package","title":"Search for a Package","text":"<p>To search for a package in the ArchLinux ARM repository, you can use the following command by replacing &lt;package_name&gt; with the name of the software you are looking for. Pacman will return a list of all matching packages.</p> <pre><code>pacman -Ss &lt;package_name1&gt; &lt;package_name2&gt; ...\n</code></pre>"},{"location":"os/pacman.html#list-installed-packages","title":"List Installed Packages","text":"<p>To view all the packages along with their versions currently installed on your system, use:</p> <pre><code>pacman -Q\n</code></pre>"},{"location":"os/pacman.html#installupdate-a-package","title":"Install/Update a Package","text":"<p>To install/Update a new package on KNEO Pi, run:</p> <pre><code>sudo pacman -S &lt;package_name&gt;\n</code></pre>"},{"location":"os/pacman.html#uninstall-a-package","title":"Uninstall a Package","text":"<p>To remove a package from your system while keeping its dependencies, use:  </p> <pre><code>sudo pacman -R &lt;package_name&gt;\n</code></pre> <p>If you want to remove the package along with its unneeded dependencies, use:</p> <pre><code>sudo pacman -Rns &lt;package_name&gt;\n</code></pre>"},{"location":"os/pacman.html#manage-disk-usage-by-removing-package-cache","title":"Manage Disk Usage by Removing Package Cache","text":"<p>Pacman stores cached packages in /var/cache/pacman/pkg/, which can accumulate over time and consume disk space. To remove old cached packages, you can use the following command:</p> <pre><code>sudo pacman -Sc\n</code></pre> <p>Info</p> <p>Refer to the full instructions on the official Pacman  site.</p>"},{"location":"os/python.html","title":"Python Environment on KNEO Pi","text":"<p>KNEO Pi provides a robust Python development environment with <code>Python 3.12</code> pre-installed. To manage Python packages effectively and avoid potential conflicts, follow these guidelines.</p> <p>Important</p> <p>when you are using <code>pip</code> the same installation folder is shared with <code>pacman</code> and most of time, especially when you are updating all system packages (<code>pacman -Suy</code>), will raise a conflict error, such as version mismathes and borken dependencies. You always have to prefer the first option above. To solve conflict problems, just uninstall pip package and install they equivalent package on pacman.</p>"},{"location":"os/python.html#installing-python-packages-with-pacman","title":"Installing Python Packages with Pacman","text":"<p>To search and install Python packages using pacman, run:</p> <p>Search for a package from Arch User Repository (AUR) </p> <p><pre><code>pacman -Ss python-{package_name}\n</code></pre> Install the package:</p> <p><pre><code>sudo pacman -S python-{package_name}\n</code></pre> This ensures that system-wide packages are managed correctly and conflicts are minimized.</p>"},{"location":"os/python.html#resolving-conflicts","title":"Resolving Conflicts","text":"<p>If you\u2019ve installed packages using <code>pip</code> and encounter conflicts, follow these steps to resolve them:</p> <p>Uninstall the conflicting pip package:</p> <p><pre><code>pip uninstall {package_name}\n</code></pre> Install the equivalent package using pacman:</p> <p><pre><code>sudo pacman -S python-{package_name}\n</code></pre> This approach ensures that the system maintains stability by using the pacman package manager for system-wide installations.</p>"},{"location":"os/python.html#using-virtual-environments-with-pip","title":"Using Virtual Environments with <code>pip</code>","text":"<p>To safely use <code>pip</code> for installing additional Python packages without affecting the system, it\u2019s recommended to use a virtual environment. See Python official documenation  for details.</p> <p>Install the virtual environment tool:</p> <p><pre><code>sudo pacman -S python-virtualenv\n</code></pre> Create a virtual environment: <pre><code>python3 -m venv myenv\n</code></pre> Activate the virtual environment: <pre><code>source myenv/bin/activate\n</code></pre> Install packages within the virtual environment: <pre><code>pip install {package_name}\n</code></pre> Deactivate the virtual environment when done: <pre><code>deactivate\n</code></pre> By using virtual environments, you can safely manage project-specific dependencies without interfering with the system\u2019s Python environment.</p> <p>Note</p> <ul> <li>Use <code>pacman</code> for system-wide Python package management to avoid conflicts.  </li> <li>Resolve conflicts by switching from <code>pip</code> to <code>pacman</code> for system-wide packages.</li> <li>For project-specific packages, always use virtual environments created with <code>python-virtualenv</code> to manage dependencies safely.</li> </ul>"}]}